/* -- `OnChanges` is an interface provided by Angular that allows you to detect changes to input
  properties of a component. It contains a method called `ngOnChanges` which is called whenever one
  or more input properties of the component change. In this code, `OnChanges` is used to detect
  changes to the `control` input property and trigger the `checkValidation` method.
   -- `SimpleChanges` is an interface provided by Angular that allows you to detect changes to input
  properties of a component. It contains previous and current values of the input properties, as
  well as a boolean flag indicating whether the input property has changed. In this code,
  `SimpleChanges` is used in the `ngOnChanges` method to detect changes to the `control` input
  property and trigger the `checkValidation` method. */
import {
  Component,
  Input,
  OnInit,
  OnChanges,
  SimpleChanges,
} from "@angular/core";
/* `AbstractControl` is a class provided by Angular that serves as the base class for form
controls, including `FormControl`, `FormGroup`, and `FormArray`. It provides common
properties and methods for working with form controls, such as `value`, `valid`, `invalid`,
`touched`, `untouched`, `dirty`, `pristine`, `markAsTouched()`, `markAsUntouched()`,
`markAsDirty()`, `markAsPristine()`, `setValidators()`, `setAsyncValidators()`, and more.
In this code, `AbstractControl` is used as an input property to the
`InputValidationComponent` to allow the component to work with any type of form control. */
import { AbstractControl } from "@angular/forms";

/* `const VALIDATOR_MESSAGES` is an object that contains error messages for different types of
validators. The keys of the object correspond to the names of the validators, such as "required" and
"email", and the values are the error messages to be displayed when the corresponding validator
fails. This object is used in the `checkValidation` method to retrieve the error message for each
error in the `AbstractControl` and display it to the user. */
const VALIDATOR_MESSAGES: any = {
  required: "This field cannot be empty",
  minlength: "Invalid field length",
  maxlength: "Field length exceeded",
  passwordMismatch: "Password and Confirm password fields do not match",
};

@Component({
  selector: "input-validation",
  templateUrl: "./input-validation.component.html",
  styleUrls: ["./input-validation.component.css"],
})
export class InputValidationComponent implements OnInit, OnChanges {
  @Input() control!: AbstractControl;
  @Input() showErrorIf: boolean = true;
  /* `errorMessages: string[] = [];` is initializing an empty array of strings called `errorMessages`.
  This array will be used to store error messages generated by the `checkValidation` method. By
  initializing it as an empty array, we ensure that it is always defined and can be safely accessed
  and manipulated. */
  errorMessages: string[] = [];
  constructor() {}
  ngOnChanges(changes: SimpleChanges): void {
    this.checkValidation();
  }

  ngOnInit() {
    /* `this.control.statusChanges.subscribe(() => { this.checkValidation(); });` is setting up a
    subscription to the `statusChanges` observable of the `AbstractControl` input property. This
    means that whenever the status of the control changes (e.g. from valid to invalid), the
    `checkValidation` method will be called to update the error messages displayed to the user. */
    this.control.statusChanges.subscribe(() => {
      this.checkValidation();
    });
    /* `this.control.valueChanges.subscribe(() => { this.checkValidation(); });` sets up a subscription
    to the `valueChanges` observable of the `AbstractControl` input property. This means that
    whenever the value of the control changes (e.g. when the user types something into an input
    field), the `checkValidation` method will be called to update the error messages displayed to
    the user. */
    this.control.valueChanges.subscribe(() => {
      this.checkValidation();
    });
  }
  checkValidation() {
    /* `const errors = this.control.errors;` is retrieving the errors associated with the
    `AbstractControl` input property and assigning them to the `errors` constant. If there are no
    errors, `errors` will be `null`. If there are errors, `errors` will be an object where the keys
    correspond to the names of the validators that failed and the values are `true`. */
    const errors = this.control.errors;
    if (!errors) {
      this.errorMessages = [];
      return;
    }
    /* `const errorKeys = Object.keys(errors);` is retrieving an array of keys from the `errors` object
    and assigning them to the `errorKeys` constant. These keys correspond to the names of the
    validators that failed for the `AbstractControl` input property. This array of keys is then used
    in the `map` method to retrieve the error message for each error and display it to the user. */
    const errorKeys = Object.keys(errors);
    /* `this.errorMessages = errorKeys.map((key) => { return VALIDATOR_MESSAGES[key]; });` is mapping
    over the array of error keys and retrieving the corresponding error message from the
    `VALIDATOR_MESSAGES` object for each key. The resulting array of error messages is then assigned
    to the `errorMessages` property of the component, which is used to display the error messages to
    the user. */
    this.errorMessages = errorKeys.map((key) => {
      return VALIDATOR_MESSAGES[key];
    });
  }
}
