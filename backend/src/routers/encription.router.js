import crypto from "crypto";
import { Router } from "express";
import asyncHandler from "express-async-handler";
// const crypto = require("crypto");

class Encryption {
  constructor(ivKey, secretKey, algorithm) {
    this.IVKey = ivKey;
    this.secretKey = secretKey;
    this.algorithm = algorithm;
  }

  encrypt(payload) {
    let key = crypto
      .createHash("sha256")
      .update(this.secretKey)
      .digest("hex")
      .substring(0, 32);

    key = Buffer.from(key);

    // prepare the IV key
    let iv = crypto
      .createHash("sha256")
      .update(this.IVKey)
      .digest("hex")
      .substring(0, 16);

    iv = Buffer.from(iv);

    /* `const cipher = crypto.createCipheriv(this.algorithm, Buffer.from(key), iv);` is creating a new
    cipher object using the specified algorithm, key, and initialization vector (IV). The
    `algorithm` parameter specifies the encryption algorithm to use, such as "aes-256-cbc". The
    `key` parameter is a buffer containing the secret key used for encryption. The `iv` parameter is
    a buffer containing the initialization vector used for encryption. The resulting `cipher` object
    can be used to encrypt data using the specified algorithm, key, and IV. */
    const cipher = crypto.createCipheriv(this.algorithm, Buffer.from(key), iv);

    /* `let encrypted = cipher.update(payload);` is updating the `cipher` object with the `payload`
    data to be encrypted. The `update()` method of the `cipher` object is used to process the input
    data and return encrypted data. The encrypted data is stored in the `encrypted` variable. */
    let encrypted = cipher.update(payload);

    /* `encrypted = Buffer.concat([encrypted, cipher.final()]);` is concatenating the encrypted data
    generated by the `cipher.update()` method with the final block of encrypted data generated by
    the `cipher.final()` method. The resulting concatenated buffer contains the complete encrypted
    data. */
    encrypted = Buffer.concat([encrypted, cipher.final()]);

    /* `let base64 = Buffer.from(encrypted, "binary").toString("base64");` is converting the encrypted
    data from a binary format to a base64 format. */
    let base64 = Buffer.from(encrypted, "binary").toString("base64");
    /* The `return Buffer.from(base64, "binary").toString("base64");` statement is converting the
    encrypted data from a binary format to a base64 format and then back to a base64 format again.
    This seems unnecessary and may be a mistake. It is possible that the intended code was `return
    base64;` which would simply return the encrypted data in base64 format. */
    return Buffer.from(base64, "binary").toString("base64");
  }
}
// module.exports = Encryption;
export default Encryption;
